name: Go test linux - mysql

on:
  push:
  pull_request:
    branches: [main]
  schedule:
    - cron: "15 7 * * *"

env:
  SENZING_LOG_LEVEL: TRACE
  SENZING_TOOLS_DATABASE_URL: "mysql://mysql:mysql@127.0.0.1:3306/G2"

permissions:
  contents: read

jobs:
  go-test-linux:
    name: "Go test with Senzing: ${{ matrix.senzingsdk-version }}; OS: ${{ matrix.os }}; Go: ${{ matrix.go }} - mysql"
    outputs:
      status: ${{ job.status }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go: ["1.24"]
        os: [ubuntu-latest]
        senzingsdk-version: [production-v4, staging-v4]

    services:
      mysql:
        # https://hub.docker.com/r/bitnami/mysql
        env:
          MYSQL_DATABASE: G2
          MYSQL_PASSWORD: mysql
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: mysql
        image: bitnami/mysql
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy rootfs files
        run: |
          sudo cp --verbose --recursive rootfs/* /

      - name: Install Senzing SDK
        uses: senzing-factory/github-action-install-senzing-sdk@v3
        with:
          packages-to-install: "senzingsdk-runtime senzingsdk-setup"
          senzingsdk-version: ${{ matrix.senzingsdk-version }}

      - name: Install dependencies
        run: |
          sudo apt-get install mysql-server

      - name: Run go test
        run: |
          export SENZING_PATH="/opt/senzing"
          export LD_LIBRARY_PATH="${SENZING_PATH}/er/lib"
          go test -json -v -p 1 ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

  slack-notification:
    needs: [go-test-linux]
    if: ${{ always() && contains(fromJSON('["failure", "cancelled"]'), needs.go-test-linux.outputs.status ) && (github.ref_name == github.event.repository.default_branch || github.event_name == 'schedule') }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    uses: senzing-factory/build-resources/.github/workflows/build-failure-slack-notification.yaml@v2
    with:
      job-status: ${{ needs.go-test-linux.outputs.status }}
